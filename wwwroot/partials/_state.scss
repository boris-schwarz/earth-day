.state {
	@include full-screen;
	> .state__bool {
		display: none;
		pointer-events: none;
		&.debug {
			display: block;
			font-size: 13px;
			line-height: 13px;
			position: fixed;
			z-index: 99999;
			hr {
				margin: 0;
			}
			input {
				margin: 0;
				height: 13px;
				pointer-events: all;
				vertical-align: bottom;
				width: 13px;
			}
		}
	}
}


/* state: settings */
.state:has(.state__bool [id="state_animations"]:not(:checked)) {
	.settings__animations {
		background-color: var(--color-black);
		[class*="icon--"] {
			background-color: var(--color-white);
		}
		.icon--disabled {
			display: block;
		}
	}
}

/* state: game running */
.state:has(.state__bool [id="state_intro"]:checked) {
	.hud__menu {
		display: none;
	}
}

/* show intro */
.state:has(.state__bool [id="state_intro"]:checked):not(:has(
	input[id="state_deforestation_happening"]:checked
)) {
	.hud__actions .action__intro {
		animation-fill-mode: forwards;
		animation-duration: 1s;
		animation-name: persistent-snackbar;
	}
}


@each $happening, $successor, $amount in $happenings {
	/* #{$happening} happening */
	.state:has(.state__bool [id="state_#{$happening}_happening"]:checked):has(
		input[id^="state_#{$happening}_solved_"]:not(:checked)
	) {
		.canvas__earth {
			.happenings {
				[class^="happening__#{$happening}--"] {
					animation-name: happening-occurs;
					@for $i from 1 through $amount {
						&.happening__#{$happening}--#{$i} {
							animation-delay: (120 * $i) + ms;
						}
					}
				}
			}
		}
		.hud__actions .action__#{$happening} {
			animation-fill-mode: forwards;
			animation-name: critical-snackbar;
		}
		.hud__actions .action__#{$happening} .action__progress {
			animation-name: snackbar-progress;
		}
	}

	/* #{$happening} solving */
	@for $i from 1 through $amount {
		.state:has(.state__bool [id="state_#{$happening}_happening"]:checked):has(
			input[id="state_#{$happening}_solved_#{$i}"]:checked
		) { label[for="state_#{$happening}_solved_#{$i}"] { display: none; } }
	}

	/* #{$happening} solved */
	$condition: '';
	@for $i from 1 through $amount {
		$condition: $condition + ':has(input[id="state_#{$happening}_solved_#{$i}"]:checked)';
	}
	.state:has(.state__bool [id="state_#{$happening}_happening"]:checked)#{$condition}:not(:has(
		input[id="state_#{$successor}_happening"]:checked
	)) {
		.hud__notifications .notification__#{$happening} {
			animation-name: persistent-snackbar;
		}
	}
}

/* won the game */
.state:has(.state__bool [id="state_win_happening"]:checked) {
	.hud__actions .action__win {
		animation-duration: 1s;
		animation-name: persistent-snackbar;
		animation-fill-mode: forwards;
	}
}





/* oilspill happening */
/* .state:has(.state__bool [id="state_oilspill_happening"]:checked):has(
	input[id^="state_oilspill_solved_"]:not(:checked)
) {
	.hud__actions .action__oilspill {
		animation-fill-mode: forwards;
		animation-name: critical-snackbar;
	}
	.hud__actions .action__oilspill .action__progress {
		animation-name: snackbar-progress;
	}
} */